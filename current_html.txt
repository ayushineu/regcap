
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>RegCap GPT | Regulatory Intelligence</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.css">
        <style>
            :root {
                --bg-color: #ffffff;
                --text-color: #212529;
                --border-color: #ddd;
                --tab-bg: #f5f5f5;
                --tab-active-bg: #007bff;
                --tab-active-color: white;
                --user-msg-bg: #e6f7ff;
                --user-msg-border: #1890ff;
                --bot-msg-bg: #f5f5f5;
                --bot-msg-border: #52c41a;
                --session-bg: #f8f9fa;
                --diagram-bg: #e9f7ef;
                --app-heading: #0056b3;
                --card-bg: #f8f9fa;
                --notification-bg: #ffe8cc;
                --notification-text: #333;
            }
            
            [data-theme="dark"] {
                --bg-color: #212529;
                --text-color: #f8f9fa;
                --border-color: #495057;
                --tab-bg: #343a40;
                --tab-active-bg: #0d6efd;
                --tab-active-color: white;
                --user-msg-bg: #0d47a1;
                --user-msg-border: #42a5f5;
                --bot-msg-bg: #2d2d2d;
                --bot-msg-border: #66bb6a;
                --session-bg: #343a40;
                --diagram-bg: #343a40;
                --app-heading: #42a5f5;
                --card-bg: #343a40;
                --notification-bg: #664500;
                --notification-text: #ffe8cc;
            }
            
            body {
                font-family: Arial, sans-serif;
                line-height: 1.6;
                padding: 20px;
                max-width: 1200px;
                margin: 0 auto;
                background-color: var(--bg-color);
                color: var(--text-color);
                transition: all 0.3s ease;
            }
            .chat-container {
                height: 400px;
                overflow-y: auto;
                padding: 15px 0;
                margin-bottom: 20px;
            }
            .user-message, .bot-message {
                margin-bottom: 15px;
                padding: 10px;
                border-radius: 5px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.12);
            }
            .user-message {
                background-color: var(--user-msg-bg);
                margin-left: 20%;
                border-left: 3px solid var(--user-msg-border);
            }
            .bot-message {
                background-color: var(--bot-msg-bg);
                margin-right: 20%;
                border-left: 3px solid var(--bot-msg-border);
            }
            .document-section, .diagram-section {
                margin-top: 30px;
                padding: 20px;
                border: 1px solid var(--border-color);
                border-radius: 5px;
                background-color: var(--card-bg);
                color: var(--text-color);
            }
            .app-container {
                display: flex;
                min-height: 80vh;
            }
            .tabs {
                display: flex;
                flex-direction: column;
                width: 200px;
                border-right: 1px solid var(--border-color);
                margin-right: 20px;
                padding-right: 10px;
            }
            .tab {
                padding: 15px;
                cursor: pointer;
                background-color: var(--tab-bg);
                border: 1px solid var(--border-color);
                margin-bottom: 5px;
                border-radius: 5px;
                font-weight: bold;
                transition: all 0.3s ease;
                text-align: left;
            }
            .tab.active {
                background-color: var(--tab-active-bg);
                color: var(--tab-active-color);
                border-color: var(--tab-active-bg);
            }
            .tab:hover {
                background-color: #e3e3e3;
            }
            .tab.active:hover {
                background-color: #0069d9;
            }
            [data-theme="dark"] .tab:hover {
                background-color: #4a4a4a;
            }
            [data-theme="dark"] .tab.active:hover {
                background-color: #0069d9;
            }
            #diagrams-tab-button {
                background-color: var(--tab-bg);
                border: 1px solid var(--border-color);
            }
            #diagrams-tab-button.active {
                background-color: var(--tab-active-bg);
                color: var(--tab-active-color);
                border-color: var(--tab-active-bg);
            }
            [data-theme="dark"] #diagrams-tab-button {
                background-color: var(--tab-bg);
                border: 1px solid var(--border-color);
            }
            [data-theme="dark"] #diagrams-tab-button.active {
                background-color: #0069d9;
                color: white;
                border-color: #0069d9;
            }
            .tab-content {
                display: none;
            }
            .tab-content.active {
                display: block;
            }
            .session-info {
                margin-bottom: 20px;
                padding: 10px;
                background-color: var(--session-bg);
                border-radius: 5px;
                border: 1px solid var(--border-color);
            }
            .document-list {
                margin-top: 15px;
            }
            .document-item {
                padding: 5px 0;
            }
            .diagram-item {
                margin-bottom: 30px;
                padding: 15px;
                border: 1px solid var(--border-color);
                border-radius: 5px;
                background-color: var(--card-bg);
                color: var(--text-color);
            }
            .diagram-code {
                margin-top: 10px;
                padding: 10px;
                background-color: var(--session-bg);
                border-radius: 5px;
                overflow-x: auto;
            }
            .diagram-explanation {
                margin-top: 10px;
                padding: 10px;
                background-color: var(--card-bg);
                color: var(--text-color);
                border-radius: 5px;
            }
            .diagram-visual {
                margin-top: 20px;
                padding: 10px;
                background-color: var(--diagram-bg);
                color: var(--text-color);
                border: 1px solid var(--border-color);
                border-radius: 5px;
            }
            .footer {
                margin-top: 50px;
                text-align: center;
                color: var(--text-color);
                font-size: 0.9rem;
                opacity: 0.7;
            }
            
            /* Dark mode specific bootstrap overrides */
            [data-theme="dark"] .form-control {
                background-color: #333;
                border-color: #555;
                color: #fff;
            }
            [data-theme="dark"] .list-group-item {
                background-color: #333;
                border-color: #555;
                color: #fff;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="mt-4 mb-4 d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="mb-0" style="color: var(--app-heading);">RegCap GPT</h1>
                    <p class="mb-0" style="font-size: 1.1rem; color: var(--text-color); opacity: 0.7;">Regulatory Intelligence</p>
                </div>
                <div>
                    <button id="darkModeToggle" class="btn btn-outline-secondary">
                        <i class="fa fa-moon-o"></i> Dark Mode
                    </button>
                </div>
            </div>
            
            <!-- App Container with Sidebar Tabs -->
            <div class="app-container">
                <!-- Sidebar Tabs -->
                <div class="tabs">
                    <div id="chat-tab-button" class="tab active" onclick="openTab(event, 'chat-tab')">Chat</div>
                    <div id="documents-tab-button" class="tab" onclick="openTab(event, 'documents-tab')">Documents</div>
                    <div id="diagrams-tab-button" class="tab" onclick="openTab(event, 'diagrams-tab')">
                        <span style="position: relative;">
                            Diagrams
                            <div style="position: absolute; top: 3px; right: 5px; background-color: #ff9900; color: white; border-radius: 50%; width: 18px; height: 18px; display: none; font-size: 12px; text-align: center; line-height: 18px;" id="diagrams-notification">!</div>
                        </span>
                    </div>
                    <div id="sessions-tab-button" class="tab" onclick="openTab(event, 'sessions-tab')">Sessions</div>
                </div>
                
                <!-- Tab Content Container -->
                <div class="tab-content-container" style="flex: 1;">
                    <!-- Chat Tab -->
                    <div id="chat-tab" class="tab-content active">
                        <div class="chat-container" id="chat-messages">
                    
                        <div class="bot-message">
                            <strong>Bot:</strong> Welcome to RegCap GPT! I'm your regulatory intelligence assistant. Upload regulatory documents and ask me questions about them.
                        </div>
                    
                </div>
                
                <form action="/ask" method="post" id="question-form">
                    <div class="mb-3">
                        <label for="question" class="form-label">Your Question:</label>
                        <textarea class="form-control" id="question" name="question" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary" id="ask-button">Ask</button>
                    <div id="question-status" class="mt-2" style="display: none;">
                        <div class="d-flex align-items-center">
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Processing...</span>
                            </div>
                            <span>Processing your question...</span>
                        </div>
                    </div>
                </form>
            </div>
            
            <!-- Documents Tab -->
            <div id="documents-tab" class="tab-content">
                <div class="document-section">
                    <h3>Upload Documents</h3>
                    <form action="/upload" method="post" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="document" class="form-label">Select PDF Document(s):</label>
                            <input class="form-control" type="file" id="document" name="document" multiple accept=".pdf" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Upload</button>
                    </form>
                    
                    <div class="document-list mt-4">
                        <h4>Uploaded Documents</h4>
                        
                            <p>No documents uploaded yet.</p>
                        
                    </div>
                </div>
            </div>
            
            <!-- Diagrams Tab -->
            <div id="diagrams-tab" class="tab-content">
                <div class="diagram-section">
                    <h3>Generated Diagrams</h3>
                    
                        <p>No diagrams generated yet. Ask a question that requires a diagram or visualization.</p>
                    
                </div>
            </div>
            
            <!-- Sessions Tab -->
            <div id="sessions-tab" class="tab-content">
                <div class="session-section">
                    <div class="mb-4">
                        <h3>Current Session</h3>
                        <div class="session-info">
                            <h5>Active Session: session_1744265158</h5>
                            <button id="createNewSessionBtn" class="btn btn-primary mt-2">Create New Session</button>
                        </div>
                    </div>
                    
                    <h3>Available Sessions</h3>
                    
                        <ul class="list-group">
                            
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    session_1744265146 
                                    
                                        <button class="btn btn-sm btn-outline-primary switch-session-btn" data-session-id="session_1744265146">Switch</button>
                                    
                                </li>
                            
                        </ul>
                    
                </div>
            </div>
            
                </div>
            </div>
            
            <div class="footer mt-5">
                <p>RegCap GPT &copy; 2025 | Regulatory Intelligence</p>
            </div>
        </div>
        
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
        <script>
            // Initialize Mermaid with more robust configuration
            mermaid.initialize({
                startOnLoad: true,
                theme: 'default',
                logLevel: 'fatal',
                securityLevel: 'loose',
                flowchart: { 
                    htmlLabels: true,
                    curve: 'basis'
                },
                sequence: {
                    diagramMarginX: 50,
                    diagramMarginY: 10,
                    actorMargin: 50,
                    width: 150,
                    height: 65
                }
            });
            
            // Auto-refresh was removed from here because it was causing issues
            // with constant page refreshes
            
            // Tab functionality
            function openTab(evt, tabName) {
                var i, tabContent, tabs;
                tabContent = document.getElementsByClassName("tab-content");
                for (i = 0; i < tabContent.length; i++) {
                    tabContent[i].className = tabContent[i].className.replace(" active", "");
                }
                tabs = document.getElementsByClassName("tab");
                for (i = 0; i < tabs.length; i++) {
                    tabs[i].className = tabs[i].className.replace(" active", "");
                }
                document.getElementById(tabName).className += " active";
                evt.currentTarget.className += " active";
                
                // Hide notification when diagrams tab is opened
                if (tabName === 'diagrams-tab') {
                    document.getElementById('diagrams-notification').style.display = 'none';
                    
                    // Force re-render mermaid diagrams when tab is opened
                    try {
                        mermaid.init(undefined, '.mermaid');
                    } catch(e) {
                        console.error("Error re-rendering mermaid diagrams:", e);
                    }
                }
            }
            
            // Scroll chat to bottom
            function scrollChatToBottom() {
                var chatContainer = document.getElementById('chat-messages');
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            // Check if we have a diagram
            function checkAndShowDiagramNotification() {
                var mermaidDivs = document.querySelectorAll('.mermaid');
                if (mermaidDivs.length > 0) {
                    var notificationElement = document.getElementById('diagrams-notification');
                    if (notificationElement) {
                        notificationElement.style.display = 'block';
                    }
                    
                    // Look for special alert in chat messages
                    var botMessages = document.querySelectorAll('.bot-message');
                    for(var i = 0; i < botMessages.length; i++) {
                        if(botMessages[i].innerHTML.includes('Please click on the "Diagrams" tab above')) {
                            // Check if button already exists to avoid duplicates
                            if (!botMessages[i].querySelector('.btn-warning')) {
                                // Add a click helper
                                var helper = document.createElement('button');
                                helper.innerHTML = 'View Diagram';
                                helper.className = 'btn btn-warning mt-2';
                                helper.onclick = function() {
                                    document.getElementById('diagrams-tab-button').click();
                                };
                                botMessages[i].appendChild(helper);
                            }
                        }
                    }
                }
            }
            
            // Function to ensure diagrams are properly rendered
            function initMermaidDiagrams() {
                try {
                    // Clean up any previous mermaid initialization
                    document.querySelectorAll('.mermaid svg').forEach(function(el) {
                        el.remove();
                    });
                    
                    // Reinitialize mermaid
                    mermaid.init(undefined, '.mermaid');
                } catch(e) {
                    console.error("Error initializing mermaid diagrams:", e);
                }
            }
            
            // Dark mode toggle functionality
            function setupDarkModeToggle() {
                const darkModeToggle = document.getElementById('darkModeToggle');
                const htmlElement = document.documentElement;
                
                // Check for saved theme preference or respect OS preference
                const savedTheme = localStorage.getItem('theme');
                const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
                
                // Apply dark theme if saved or OS prefers dark
                if (savedTheme === 'dark' || (!savedTheme && prefersDarkMode)) {
                    htmlElement.setAttribute('data-theme', 'dark');
                    darkModeToggle.innerHTML = '<i class="fa fa-sun-o"></i> Light Mode';
                    // Update Mermaid theme
                    mermaid.initialize({ theme: 'dark' });
                }
                
                // Toggle theme when button is clicked
                darkModeToggle.addEventListener('click', function() {
                    if (htmlElement.getAttribute('data-theme') === 'dark') {
                        htmlElement.removeAttribute('data-theme');
                        localStorage.setItem('theme', 'light');
                        darkModeToggle.innerHTML = '<i class="fa fa-moon-o"></i> Dark Mode';
                        // Update Mermaid theme
                        mermaid.initialize({ theme: 'default' });
                    } else {
                        htmlElement.setAttribute('data-theme', 'dark');
                        localStorage.setItem('theme', 'dark');
                        darkModeToggle.innerHTML = '<i class="fa fa-sun-o"></i> Light Mode';
                        // Update Mermaid theme
                        mermaid.initialize({ theme: 'dark' });
                    }
                    
                    // Reinitialize Mermaid diagrams with the new theme
                    try {
                        setTimeout(function() {
                            initMermaidDiagrams();
                        }, 100);
                    } catch (error) {
                        console.error("Error updating Mermaid diagrams after theme change:", error);
                    }
                });
            }
            
            // Session management via AJAX
            function setupSessionManagement() {
                // Create new session
                const createNewSessionBtn = document.getElementById('createNewSessionBtn');
                if (createNewSessionBtn) {
                    createNewSessionBtn.addEventListener('click', function() {
                        // Display loading state
                        createNewSessionBtn.disabled = true;
                        createNewSessionBtn.innerHTML = 'Creating...';
                        
                        // Send AJAX request
                        fetch('/new_session', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                        .then(response => {
                            if (response.ok) {
                                // Refresh only the content, not the entire page
                                window.location.href = '/?t=' + new Date().getTime();
                            }
                        })
                        .catch(error => {
                            console.error('Error creating new session:', error);
                            createNewSessionBtn.disabled = false;
                            createNewSessionBtn.innerHTML = 'Create New Session';
                        });
                    });
                }
                
                // Setup switch session buttons
                const switchButtons = document.querySelectorAll('.switch-session-btn');
                switchButtons.forEach(function(button) {
                    button.addEventListener('click', function() {
                        const sessionId = this.getAttribute('data-session-id');
                        
                        // Display loading state
                        button.disabled = true;
                        button.innerHTML = 'Switching...';
                        
                        // Create form data
                        const formData = new FormData();
                        formData.append('session_id', sessionId);
                        
                        // Send AJAX request
                        fetch('/switch_session', {
                            method: 'POST',
                            body: formData
                        })
                        .then(response => {
                            if (response.ok) {
                                // Refresh only the content, not the entire page
                                window.location.href = '/?t=' + new Date().getTime();
                            }
                        })
                        .catch(error => {
                            console.error('Error switching session:', error);
                            button.disabled = false;
                            button.innerHTML = 'Switch';
                        });
                    });
                });
            }
            
            // Setup AJAX form submission for questions
            function setupQuestionFormAjax() {
                const questionForm = document.getElementById('question-form');
                const askButton = document.getElementById('ask-button');
                const statusDiv = document.getElementById('question-status');
                const questionInput = document.getElementById('question');
                
                if (questionForm) {
                    questionForm.addEventListener('submit', function(e) {
                        e.preventDefault(); // Prevent regular form submission
                        
                        const question = questionInput.value.trim();
                        if (!question) return; // Don't submit empty questions
                        
                        // Show loading status and disable button
                        askButton.disabled = true;
                        statusDiv.style.display = 'block';
                        
                        // Create the form data from the question
                        const formData = new FormData();
                        formData.append('question', question);
                        
                        // Send AJAX request with x-requested-with header
                        fetch('/ask', {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: formData
                        })
                        .then(response => {
                            if (response.ok) {
                                return response.json().then(data => {
                                    console.log('Question submitted:', data);
                                    
                                    // Add placeholder message to the chat
                                    const chatMessages = document.getElementById('chat-messages');
                                    const userMsg = document.createElement('div');
                                    userMsg.className = 'message user-message';
                                    userMsg.textContent = question;
                                    chatMessages.appendChild(userMsg);
                                    
                                    const botMsg = document.createElement('div');
                                    botMsg.className = 'message bot-message';
                                    botMsg.innerHTML = '<div class="processing-message">Processing your question... <div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                                    chatMessages.appendChild(botMsg);
                                    
                                    // Set up status polling if we have a question ID
                                    if (data.question_id) {
                                        startStatusPolling(data.question_id, botMsg);
                                    }
                                    
                                    scrollChatToBottom();
                                    
                                    // Clear input
                                    questionInput.value = '';
                                    
                                    // Simply re-enable the button after a delay
                                    setTimeout(function() {
                                        askButton.disabled = false;
                                        statusDiv.style.display = 'none';
                                    }, 1500);
                                    
                                    // Add a small refresh button next to the "Processing" text in the chat
                                    const processingMsgs = document.querySelectorAll('.processing-message');
                                    processingMsgs.forEach(msg => {
                                        // Only add refresh button if it doesn't already have one
                                        if (!msg.querySelector('.refresh-btn')) {
                                            const refreshBtn = document.createElement('button');
                                            refreshBtn.className = 'btn btn-sm btn-outline-primary refresh-btn ms-2';
                                            refreshBtn.innerHTML = '<i class="fa fa-refresh"></i>';
                                            refreshBtn.title = "Check for answer";
                                            refreshBtn.onclick = function() { window.location.reload(); };
                                            msg.appendChild(refreshBtn);
                                        }
                                    });
                            } else {
                                console.error('Failed to submit question');
                                statusDiv.textContent = 'Error submitting question. Please try again.';
                                askButton.disabled = false;
                            }
                        })
                        .catch(error => {
                            console.error('Error submitting question:', error);
                            statusDiv.textContent = 'Error: ' + error.message;
                            askButton.disabled = false;
                        });
                    });
                }
            }
            
            // Function to poll for status updates
            function startStatusPolling(questionId, botMsg) {
                console.log('Starting status polling for question:', questionId);
                
                // Add status indicator to the bot message
                const statusDiv = document.createElement('div');
                statusDiv.className = 'status-indicator mt-2';
                statusDiv.innerHTML = `
                    <div class="card p-2 bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="status-text small">Initializing...</span>
                            <span class="status-percentage badge bg-primary">5%</span>
                        </div>
                        <div class="progress mt-1" style="height: 4px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" style="width: 5%;" 
                                 aria-valuenow="5" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                `;
                
                botMsg.appendChild(statusDiv);
                
                const statusText = statusDiv.querySelector('.status-text');
                const statusPercentage = statusDiv.querySelector('.status-percentage');
                const progressBar = statusDiv.querySelector('.progress-bar');
                
                let pollCount = 0;
                let lastStage = '';
                
                // Set up the polling interval
                const pollInterval = setInterval(() => {
                    pollCount++;
                    
                    // Check the status
                    fetch(`/get_question_status/${questionId}`)
                    .then(response => response.json())
                    .then(status => {
                        console.log('Question status:', status);
                        
                        // Update the UI with the status
                        if (status.stage && status.stage !== lastStage) {
                            statusText.innerText = status.stage;
                            lastStage = status.stage;
                        }
                        
                        if (status.progress !== undefined) {
                            const progress = status.progress;
                            statusPercentage.innerText = `${progress}%`;
                            progressBar.style.width = `${progress}%`;
                            progressBar.setAttribute('aria-valuenow', progress);
                            
                            // Update color based on progress
                            if (progress > 75) {
                                progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-success';
                            } else if (progress > 50) {
                                progressBar.className = 'progress-bar progress-bar-striped progress-bar-animated bg-info';
                            }
                        }
                        
                        // If the question is done processing or there's an error, stop polling
                        if (status.done || status.error) {
                            console.log('Question processing complete:', status);
                            clearInterval(pollInterval);
                            
                            // Set final status display
                            if (status.error) {
                                statusDiv.querySelector('.card').className = 'card p-2 bg-danger-subtle';
                                statusText.className = 'status-text small text-danger';
                                statusText.innerText = status.error;
                            } else {
                                // If done successfully, hide the status after a few seconds
                                setTimeout(() => {
                                    statusDiv.style.display = 'none';
                                }, 3000);
                            }
                            
                            // Refresh the page to show the answer
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        }
                    })
                    .catch(error => {
                        console.error('Error polling status:', error);
                        // Don't stop polling on error, just log it
                    });
                    
                    // If we've been polling for a long time without completion,
                    // still reload but at a slower interval (after 30 seconds)
                    if (pollCount > 60) { // 30 seconds (if polling every 500ms)
                        clearInterval(pollInterval);
                        console.log('Polling timeout reached, refreshing page');
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    }
                }, 500); // Poll every 500ms
            }
            
            // Call functions when page loads
            window.onload = function() {
                scrollChatToBottom();
                
                // Initialize diagrams with a delay to ensure DOM is fully loaded
                setTimeout(initMermaidDiagrams, 300);
                
                // Show diagram notification
                setTimeout(checkAndShowDiagramNotification, 500);
                
                // Setup dark mode toggle
                setupDarkModeToggle();
                
                // Setup session management
                setupSessionManagement();
                
                // Setup AJAX question form
                setupQuestionFormAjax();
            };
        </script>
    </body>
    </html>
    